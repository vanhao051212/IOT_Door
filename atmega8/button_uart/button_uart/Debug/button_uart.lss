
button_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061c  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	20 d0       	rcall	.+64     	; 0x74 <main>
  34:	36 c0       	rjmp	.+108    	; 0xa2 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z12check_buttonv>:
		}
    }
}

char check_button(){
	if (bit_is_clear(PINC, 0)){
  38:	98 99       	sbic	0x13, 0	; 19
  3a:	04 c0       	rjmp	.+8      	; 0x44 <__SREG__+0x5>
		while (bit_is_clear(PINC, 0)){
  3c:	98 9b       	sbis	0x13, 0	; 19
  3e:	fe cf       	rjmp	.-4      	; 0x3c <_Z12check_buttonv+0x4>
			// nothing 
		}
		return '1';
  40:	81 e3       	ldi	r24, 0x31	; 49
  42:	08 95       	ret
	}
	if (bit_is_clear(PINC, 1)){
  44:	99 99       	sbic	0x13, 1	; 19
  46:	04 c0       	rjmp	.+8      	; 0x50 <__SREG__+0x11>
		while (bit_is_clear(PINC, 1)){
  48:	99 9b       	sbis	0x13, 1	; 19
  4a:	fe cf       	rjmp	.-4      	; 0x48 <__SREG__+0x9>
			// nothing
		}
		return '2';
  4c:	82 e3       	ldi	r24, 0x32	; 50
  4e:	08 95       	ret
	}
	if (bit_is_clear(PINC, 2)){
  50:	9a 99       	sbic	0x13, 2	; 19
  52:	04 c0       	rjmp	.+8      	; 0x5c <__SREG__+0x1d>
		while (bit_is_clear(PINC, 2)){
  54:	9a 9b       	sbis	0x13, 2	; 19
  56:	fe cf       	rjmp	.-4      	; 0x54 <__SREG__+0x15>
			// nothing
		}
		return '3';
  58:	83 e3       	ldi	r24, 0x33	; 51
  5a:	08 95       	ret
	}
	if (bit_is_clear(PINC, 3)){
  5c:	9b 99       	sbic	0x13, 3	; 19
  5e:	04 c0       	rjmp	.+8      	; 0x68 <__SREG__+0x29>
		while (bit_is_clear(PINC, 3)){
  60:	9b 9b       	sbis	0x13, 3	; 19
  62:	fe cf       	rjmp	.-4      	; 0x60 <__SREG__+0x21>
			// nothing
		}
		return '4';
  64:	84 e3       	ldi	r24, 0x34	; 52
  66:	08 95       	ret
	}
	return '0';
  68:	80 e3       	ldi	r24, 0x30	; 48
};
  6a:	08 95       	ret

0000006c <_Z12uart_char_txh>:

void uart_char_tx(unsigned char chr){
	while (bit_is_clear(UCSRA,UDRE)) {}; //cho den khi bit UDRE=1
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <_Z12uart_char_txh>
	UDR=chr;
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <main>:
void uart_char_tx(unsigned char chr);
int main(void)
{
	//USART_Init(9600);
	
	UBRRH=0;
  74:	10 bc       	out	0x20, r1	; 32
	UBRRL=51;
  76:	83 e3       	ldi	r24, 0x33	; 51
  78:	89 b9       	out	0x09, r24	; 9
	
	UCSRA=0x00;
  7a:	1b b8       	out	0x0b, r1	; 11
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  7c:	86 e8       	ldi	r24, 0x86	; 134
  7e:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN);
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	8a b9       	out	0x0a, r24	; 10
	
	
	DDRC = 0x00;
  84:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x00;
  86:	15 ba       	out	0x15, r1	; 21
	char code = '0';
    while (1) 
    {	
		code = check_button();
  88:	d7 df       	rcall	.-82     	; 0x38 <_Z12check_buttonv>
		if (code == '1' || code == '2' || code == '3' || code == '4'){
  8a:	9f ec       	ldi	r25, 0xCF	; 207
  8c:	98 0f       	add	r25, r24
  8e:	94 30       	cpi	r25, 0x04	; 4
  90:	d8 f7       	brcc	.-10     	; 0x88 <main+0x14>
			
			//USART_TxChar(code);
			uart_char_tx(code);
  92:	ec df       	rcall	.-40     	; 0x6c <_Z12uart_char_txh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	87 ea       	ldi	r24, 0xA7	; 167
  96:	91 e6       	ldi	r25, 0x61	; 97
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x24>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x2a>
  9e:	00 00       	nop
  a0:	f3 cf       	rjmp	.-26     	; 0x88 <main+0x14>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
